{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "profile-utils",
  "type": "registry:lib",
  "title": "Profile Utils",
  "description": "Profile Utils for fetching and validation profiles",
  "dependencies": [
    "zod"
  ],
  "files": [
    {
      "path": "registry/lib/profile-types.ts",
      "content": "import { z } from \"zod\";\n\nconst Author = z.object({\n  id: z.number(),\n  name: z.string(),\n  handle: z.string(),\n  previous_name: z.string().nullable(),\n  photo_url: z.string().nullable().optional(),\n  bio: z.string().nullable(),\n});\n\nconst UserLink = z.object({\n  id: z.number().optional(),\n  value: z.string(),\n  url: z.url(),\n  type: z.string().nullable(),\n  label: z.string().nullable(),\n});\n\nexport const PublicationSchema = z.object({\n  id: z.number(),\n  subdomain: z.string(),\n  custom_domain: z.preprocess((val) => {\n    if (typeof val === \"string\") {\n      if (val.startsWith(\"http\")) {\n        return val;\n      } else {\n        return`https://${val}/`;\n      }\n    }\n    return val;\n    },\n    z.url()\n  ).nullish(),\n  name: z.string(),\n  logo_url: z.string().nullish(),\n  author_id: z.number(),\n});\n\nexport const PublicationWithAuthorSchema = PublicationSchema.extend({\n  author: Author,\n});\n\nconst PublicationUser = z.object({\n  id: z.number(),\n  user_id: z.number(),\n  publication_id: z.number(),\n  role: z.string(),\n  public: z.boolean(),\n  is_primary: z.boolean(),\n  publication: PublicationWithAuthorSchema,\n});\n\nconst leaderboardRanking = z.object({\n    category_name: z.string(),\n    category_id: z.number(),\n    rank: z.number(),\n    ranking: z.string(),\n    publication_id: z.number(),\n});\n\nconst coverImage = z.object({\n  url: z.url(),\n  width: z.number(),\n  height: z.number(),\n});\n\nconst theme = z.object({\n  cover_image: coverImage,\n})\n\nexport const ProfileSchema = z.object({\n  publicationUsers: z.array(PublicationUser),\n  userLinks: z.array(UserLink),\n  primaryPublication: PublicationSchema,\n  subscriberCount: z.string(),\n  subscriberCountNumber: z.number(),\n  leaderboardRanking: leaderboardRanking.optional(),\n  subdomainUrl: z.url().nullable(),\n  theme: theme.optional(),\n}).extend(\n  Author.shape,\n);\n\nexport type Profile = z.infer<typeof ProfileSchema>;",
      "type": "registry:lib"
    },
    {
      "path": "registry/lib/profile.ts",
      "content": "import { ProfileSchema } from \"@/lib/profile-types\";\n\nexport async function profileForHandle(handle: string) {\n  const response = await fetch(`https://substack.com/api/v1/user/${handle}/public_profile`);\n  const data = await response.json();\n  return ProfileSchema.parse(data);\n}",
      "type": "registry:lib"
    }
  ]
}