{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "post-utils",
  "type": "registry:lib",
  "title": "Post Utils",
  "description": "Post Utils for fetching and validation posts",
  "dependencies": [
    "zod"
  ],
  "files": [
    {
      "path": "registry/client/types/posts.ts",
      "content": "import z from \"zod\";\nimport { PublicationSchema } from \"./profile\";\n\nconst audioItem = z.object({\n  post_id: z.number(),\n  voice_id: z.string(),\n  audio_url: z.url().nullable(),\n  type: z.string(),\n  duration: z.number().optional()\n})\n\n/**\n * Raw API response shape for posts\n */\nexport const PostSchema = z.object({\n  id: z.number(),\n  publication_id: z.number(),\n  title: z.string(),\n  slug: z.string(),\n  post_date: z.string(),\n  canonical_url: z.string(),\n  type: z.union([\n    z.literal(\"newsletter\"),\n    z.literal(\"podcast\"),\n    z.literal(\"thread\"),\n  ]),\n  subtitle: z.string().nullable().optional(),\n  cover_image: z.string().nullable().optional(),\n  description: z.string(),\n  truncated_body_text: z.string().nullable().optional(),\n  reaction_count: z.number(),\n  comment_count: z.number(),\n  audio_items: z.array(audioItem).optional()\n});\n\nexport type Post = z.infer<typeof PostSchema>;\n\nexport const PostResponseSchema = z.object({\n    post: PostSchema,\n    publication: PublicationSchema\n})\n\nexport const UserPostListSchema = z.object({\n    posts: z.array(PostSchema)\n});\n\nexport const PublicationPostListSchema = z.array(PostSchema);",
      "type": "registry:lib"
    },
    {
      "path": "registry/client/posts.ts",
      "content": "import { UserPostListSchema, Post, PostResponseSchema, PublicationPostListSchema } from \"./types/posts\";\nimport { z } from \"zod\";\n\nexport async function userPostsForId(id: number, opts?: {\n    offset?: number,\n    limit?: number\n}): Promise<Post[]> {\n    const offset = opts?.offset ? `&offset=${opts?.offset}` : \"\";\n    const limit = opts?.limit ? `&limit=${opts.limit}` : \"\";\n    const response = await fetch(`https://substack.com/api/v1/profile/posts?profile_user_id=${id}${offset}${limit}`);\n    const data = await response.json();\n    return UserPostListSchema.parse(data).posts;\n}\n\nexport async function postForId(id: number): Promise<Post> {\n    const response = await fetch(`https://substack.com/api/v1/posts/by-id/${id}`);\n    const data = await response.json();\n    return PostResponseSchema.parse(data).post;\n}\n\nexport async function publicationPostsForURL(url: string, opts?: {\n    sort?: \"new\" | \"top\",\n    offset?: number,\n    limit?: number\n}): Promise<Post[]> {\n    const urlParsed = z.url().safeParse(url);\n    if (!urlParsed.success) {\n        throw new Error(\"Invalid URL\");\n    }\n\n    const sort = opts?.sort ? `${opts?.sort}` : \"new\";\n    const offset = opts?.offset ? `&offset=${opts?.offset}` : \"\";\n    const limit = opts?.limit ? `&limit=${opts.limit}` : \"\";\n\n    if (opts?.limit && (opts?.limit > 50 || opts?.limit < 1)) {\n        throw new Error(\"Limit must be between 1 and 50\");\n    }\n    const response = await fetch(`${urlParsed.data}/api/v1/archive?sort=${sort}${offset}${limit}`);\n    const data = await response.json();\n    return PublicationPostListSchema.parse(data);\n}\n\nconst res = await publicationPostsForURL(\"https://letters.thedankoe.com\", { sort: \"top\", offset: 1, limit: 1})\nconsole.log(res.length)",
      "type": "registry:lib"
    }
  ]
}